The following schematic visualises the organisation in these tables. They each have a set of attributes that identify and characterise the astronomical object.

Star
Column name
kepler_id
koi_name
t_eff
radius
 
Planet
Column name
kepler_id
koi_name
kepler_name
status
period
radius
t_eq



SELECT radius, t_eff 
FROM Star
WHERE radius > 1;
----------------------------

SELECT kepler_id, t_eff 
FROM Star
WHERE t_eff BETWEEN 5000 and 6000;
---------------------------------------------

SELECT kepler_name, radius 
FROM Planet
WHERE
  radius BETWEEN 1 AND 3 AND
  kepler_name IS NOT NULL;
  ---------------------------------------------
  
  SELECT MIN(radius), MAX(radius),
  AVG(radius), STDDEV(radius)
FROM Planet
WHERE kepler_name IS NULL;

_____________________________________________________

SELECT kepler_id, COUNT(koi_name) 
FROM Planet 
GROUP BY kepler_id
HAVING COUNT(koi_name) > 1
ORDER BY COUNT(koi_name) DESC;
-------------------------------------------

SELECT s.radius AS sun_radius,
  p.radius AS planet_radius
FROM Star AS s, Planet AS p
WHERE s.kepler_id = p.kepler_id AND
  s.radius > p.radius 
ORDER BY S.radius DESC;
-------------------------------------
ELECT Star.radius, COUNT(Planet.koi_name)
FROM Star
JOIN Planet USING (kepler_id)
WHERE Star.radius >= 1
GROUP BY Star.kepler_id
HAVING COUNT(Planet.koi_name) > 1
ORDER BY Star.radius DESC;
-------------------------------------------------
SELECT s.kepler_id, s.t_eff, s.radius
FROM Star AS s
LEFT OUTER JOIN Planet AS p USING (kepler_id)
WHERE p.koi_name is NULL
ORDER BY t_eff DESC;
----------------------------------------------------

INSERT INTO Star (kepler_id, t_eff, radius)
  VALUES (7115384, 3789, 27.384);

INSERT INTO Star (kepler_id, t_eff, radius)
  VALUES (8106973, 5810, 0.811);

INSERT INTO Star (kepler_id, t_eff, radius)
  VALUES (9391817, 6200, 0.958);
----------------------------------------------------
UPDATE Planet
 SET kepler_name = NULL
 WHERE UPPER(status) != 'CONFIRMED';


DELETE FROM Planet
 WHERE radius < 0;
 
________________________________________

CREATE TABLE Planet (
  kepler_id INTEGER NOT NULL,
  koi_name VARCHAR(15) NOT NULL UNIQUE,
  kepler_name VARCHAR(15),
  status VARCHAR(20) NOT NULL,
  radius FLOAT NOT NULL
);

INSERT INTO Planet 
(kepler_id, koi_name, kepler_name, status, radius)
 VALUES(6862328, 'K00865.01', NULL, 'CANDIDATE', 119.021);
 
INSERT INTO Planet 
 (kepler_id, koi_name, kepler_name, status, radius)
 VALUES(10187017, 'K00082.05', 'Kepler-102 b', 'CONFIRMED', 5.286);
 
INSERT INTO Planet 
 (kepler_id, koi_name, kepler_name, status, radius)
 VALUES(10187017, 'K00082.04', 'Kepler-102 c', 'CONFIRMED', 7.071);รง
 ------------------------------------------------------------------------
 CREATE TABLE Star (
  kepler_id INTEGER PRIMARY KEY,
  t_eff INTEGER NOT NULL,
  radius FLOAT NOT NULL
);

CREATE TABLE Planet (
  kepler_id INTEGER REFERENCES Star(Kepler_ID),
  koi_name VARCHAR(20) PRIMARY KEY,
  kepler_name VARCHAR(20),
  status VARCHAR(20) NOT NULL,
  period FLOAT,
  radius FLOAT,
  t_eq INTEGER
);

COPY Star (kepler_id, t_eff, radius) FROM 'stars.csv' CSV;
COPY Planet (kepler_id, koi_name, kepler_name, status, period, radius, t_eq) FROM 'planets.csv' CSV;

-----------------------------------------------------------------------------------------------------------
ALTER TABLE Star
 ADD COLUMN ra FLOAT,
 ADD COLUMN decl FLOAT;

DELETE FROM Star;

COPY Star (kepler_id, t_eff, radius, ra, decl) FROM 'stars_full.csv' CSV;
---------------------------------------------------------------------------
ALTER TABLE Star
 ADD COLUMN ra FLOAT,
 ADD COLUMN decl FLOAT;

DELETE FROM Star;

COPY Star (kepler_id, t_eff, radius, ra, decl) FROM 'stars_full.csv' CSV;
---------------------------------------------------------------------------
import numpy as np

def query(f_name):
  data = np.loadtxt(f_name, delimiter=',', usecols=(0, 2))
  return data[data[:, 1]>1, :]
  

if __name__ == '__main__':
  print(query('stars.csv')) 
--------------------------------------------------------------------------


  
 
